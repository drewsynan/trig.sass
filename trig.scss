@function __INFINITE($x) {
  @if type-of($x) != number { @return false; }
  $x_: "" + $x;
  @return $x_ == "Infinity" or $x_ == "-Infinity";
}

@function __NAN($x) {
  @if type-of($x) != number { @return true; }
  $x_: "" + $x;
  @return $x_ == "NaN";
}

@function __SASS_PRECISION() {
  $precision: 0;
  $x: 1/10;
  @while ($x/10 != 0) {
    $precision: $precision + 1;
    $x: $x/10;
  }
  @return $precision;
}

@function __SASS_SMALLEST_NUM() {
  $x: 1/10;
  $x_prev: $x;
  @while ($x/10 != 0) {
    $x_prev: $x;
    $x: $x/10;
  }
  @return $x_prev;
}

$__SASS_NAN: 0/0;

@function __eval_horner($coefs, $x) {
  /* Use Horner's scheme to evaluate a polynomial at $x
   * The coefs should be a list in descending order by 
   * degree of the term.
   * 2x^2 + 3x + 1 => (2, 3, 1) 
   */

  $result: 0;
  @each $coef in $coefs {
    $result: $result*$x + $coef;
  }
  @return $result;
}

@function __eval_poly($coefs, $x) {
  /* Evaluate a polynomial at $x
   * The coefs should be a list in descending order by 
   * degree of the term.
   * 2x^2 + 3x + 1 => (2, 3, 1)
   */
  @return __eval_horner($coefs, $x);
}

@function __kernel_sign($n) {
  @if type-of($n) != number {
    @return $__SASS_NAN
  } @elseif $n == 0 {
    @return 0;
  } @else {
    @return abs($n)/$n;
  }
}

@function __kernel_mod($a, $n) {
  $divisors: floor($a/$n);
  $remainder: $a - ($divisors * $n);
  @return $remainder;
}

@function __kernel_sqrt($n) {
  /* Evaluate a square root using Newton's method
   * If $n < 1, the function returns NaN
   * Converges quadratically
   */

  @if $n < 0 {
    @warn "Square root domain error: x must be >= 0";
    @return $__SASS_NAN;
  }

  $epsilon: __SASS_SMALLEST_NUM();

  $xn: 0;
  $xn_p1: 1;

  @while abs($xn - $xn_p1) > $epsilon {
    $xn: $xn_p1;
    $xn_p1: 0.5 * ($xn + $n/$xn);
  }

  @return $xn_p1;
}

@function __kernel_sin($x) {
  /* Algorithm
   *  1. Since sin(-x) = -sin(x), we need only to consider positive x. 
   *  2. sin(x) is approximated by a polynomial of degree 13 on
   *     [0,pi/4]
   *                 3            13
   *      sin(x) ~ x + S1*x + ... + S6*x
   *     where
   *  
   *  |sin(x)         2     4     6     8     10     12  |     -58
   *  |----- - (1+S1*x +S2*x +S3*x +S4*x +S5*x  +S6*x   )| <= 2
   *  |  x                     | 
   * 
   *  http://www.netlib.org/fdlibm/k_sin.c
   */

  $S1: -1.66666666666666324348e-01;
  $S2:  8.33333333332248946124e-03;
  $S3: -1.98412698298579493134e-04;
  $S4:  2.75573137070700676789e-06;
  $S5: -2.50507602534068634195e-08;
  $S6:  1.58969099521155010221e-10;
  
  //           1      3       5      7      9      11     13
  // sin(x) ~ x + S1*x  + S2*x + S3*x + S4*x + S5*x + S6*x
  //

  $coefs: ($S6, 0, $S5, 0, $S4, 0, $S3, 0, $S2, 0, $S1, 0, 1, 0);
  $result: __eval_poly($coefs, abs($x));
  
  // sin(-x) = -sin(x)
  @if $x < 0 {
    @return -$result;
  } @else {
    @return $result;
  }
}

@function __kernel_cos($x) {
  /* kernel cos function on [-pi/4, pi/4], pi/4 ~ 0.785398164
   * Input x is assumed to be bounded by ~pi/4 in magnitude.
   * Input y is the tail of x. 
   *
   * Algorithm
   *  1. Since cos(-x) = cos(x), we need only to consider positive x.
   *  2. cos(x) is approximated by a polynomial of degree 14 on
   *     [0,pi/4]
   *                         4            14
   *      cos(x) ~ 1 - x*x/2 + C1*x + ... + C6*x
   *     where the remez error is
   *  
   *  |              2     4     6     8     10    12     14 |     -58
   *  |cos(x)-(1-.5*x +C1*x +C2*x +C3*x +C4*x +C5*x  +C6*x  )| <= 2
   *  |                            | 
   * 
   * 
   * http://www.netlib.org/fdlibm/k_cos.c
   */

  $C1:  4.16666666666666019037e-02;
  $C2: -1.38888888888741095749e-03;
  $C3:  2.48015872894767294178e-05;
  $C4: -2.75573143513906633035e-07;
  $C5:  2.08757232129817482790e-09;
  $C6: -1.13596475577881948265e-11;

  //                   2      4      6      8      10      12       14
  // cos(x) ~ 1 - 0.5*x + C1*x + C2*x + C3*x + C4*x  + C5*x   + C6*x
  //
  $coefs: ($C6, 0, $C5, 0, $C4, 0, $C3, 0, $C2, 0, $C1, 0, -0.5, 0, 1);
  $result: __eval_poly($coefs, abs($x));

  // cos(-x) = cos(x)
  @return $result;
}

@function __kernel_tan($x) {
  /* kernel tan function on [-pi/4, pi/4], pi/4 ~ 0.7854
   * Input x is assumed to be bounded by ~pi/4 in magnitude.
   * Input y is the tail of x.
   * Input k indicates whether tan (if k = 1) or -1/tan (if k = -1) is returned.
   *
   * Algorithm
   *  1. Since tan(-x) = -tan(x), we need only to consider positive x.
   *  2. if x < 2^-28 (hx<0x3e300000 0), return x with inexact if x!=0.
   *  3. tan(x) is approximated by a odd polynomial of degree 27 on
   *     [0,0.67434]
   *                 3             27
   *      tan(x) ~ x + T1*x + ... + T13*x
   *     where
   *
   *          |tan(x)         2     4            26   |     -59.2
   *          |----- - (1+T1*x +T2*x +.... +T13*x    )| <= 2
   *          |  x          |
   *
   *     Note: tan(x+y) = tan(x) + tan'(x)*y
   *              ~ tan(x) + (1+x*x)*y
   *     Therefore, for better accuracy in computing tan(x+y), let
   *         3      2      2       2       2
   *    r = x *(T2+x *(T3+x *(...+x *(T12+x *T13))))
   *     then
   *            3    2
   *    tan(x+y) = x + (T1*x + (x *(r+y)+y))
   *
   *      4. For x in [0.67434,pi/4],  let y = pi/4 - x, then
   *    tan(x) = tan(pi/4-y) = (1-tan(y))/(1+tan(y))
   *           = 1 - 2*(tan(y) - (tan(y)^2)/(1+tan(y)))
   *
   *   http://www.netlib.org/fdlibm/k_tan.c
   */

  $T1:   3.33333333333334091986e-01;
  $T2:   1.33333333333201242699e-01;
  $T3:   5.39682539762260521377e-02;
  $T4:   2.18694882948595424599e-02;
  $T5:   8.86323982359930005737e-03;
  $T6:   3.59207910759131235356e-03;
  $T7:   1.45620945432529025516e-03;
  $T8:   5.88041240820264096874e-04;
  $T9:   2.46463134818469906812e-04;
  $T10:  7.81794442939557092300e-05;
  $T11:  7.14072491382608190305e-05;
  $T12: -1.85586374855275456654e-05;
  $T13:  2.59073051863633712884e-05;

  $pio4: 7.85398163397448278999e-01;

  $sign: __kernel_sign($x);

  $result: $__SASS_NAN; // forward declaration

  //                  3             27
  // tan(x) ~ x + T1*x + ... + T13*x
  //
  $coefs: ($T13, 0, $T12, 0, $T11, 0, $T10, 0, $T9, 0, $T8, 0, $T7, 0, $T6, 0, $T5, 0, $T4, 0, $T3, 0, $T2, 0, $T1, 0, 1, 0);

  @if abs($x) < 0.67434 {
    $result: __eval_poly($coefs, abs($x));
  } @else {
    // y = pi/4 - x
    // tan(x) = 1 - 2*(tan(y) - (tan(y)^2)/(1+tan(y)))
    $y: $pio4 - abs($x);
    $tan_y: __eval_poly($coefs, $y);
    $result: 1 - 2*($tan_y - ($tan_y*$tan_y)/(1 + $tan_y));
  }

  // tan(-x) = -tan(x)
  @return $sign * $result;
}

@function __kernel_atan($x) {
  /* atan(x)
   * Method
   *   1. Reduce x to positive by atan(x) = -atan(-x).
   *   2. According to the integer k=4t+0.25 chopped, t=x, the argument
   *      is further reduced to one of the following intervals and the
   *      arctangent of t is evaluated by the corresponding formula:
   *
   *      [0,7/16]      atan(x) = t-t^3*(a1+t^2*(a2+...(a10+t^2*a11)...)
   *      [7/16,11/16]  atan(x) = atan(1/2) + atan( (t-0.5)/(1+t/2) )
   *      [11/16,19/16] atan(x) = atan( 1 ) + atan( (t-1)/(1+t) )
   *      [19/16,39/16] atan(x) = atan(3/2) + atan( (t-1.5)/(1+1.5t) )
   *      [39/16,INF]   atan(x) = atan(INF) + atan( -1/t )
   *
   *   http://www.netlib.org/fdlibm/s_atan.c
   */

  $atan_0_5:  4.63647609000806093515e-01;
  $atan_1:    7.85398163397448278999e-01;
  $atan_3_2:  9.82793723247329054082e-01;
  $atan_inf:  1.57079632679489655800e+00;

  $aT1:   3.33333333333329318027e-01;
  $aT2:  -1.99999999998764832476e-01;
  $aT3:   1.42857142725034663711e-01;
  $aT4:  -1.11111104054623557880e-01;
  $aT5:   9.09088713343650656196e-02;
  $aT6:  -7.69187620504482999495e-02;
  $aT7:   6.66107313738753120669e-02;
  $aT8:  -5.83357013379057348645e-02;
  $aT9:   4.97687799461593236017e-02;
  $aT10: -3.65315727442169155270e-02;
  $aT11:  1.62858201153657823623e-02;

  $huge: 1.0e300;

  $sign: __kernel_sign($x);

  @if INFINITE($x) { 
    $x: $huge;
  }
  $x: abs($x);

  @if $x < 7/16 {
    $t: $x;
    $t_2: $t*$t;
    $t_3: $t_2*$t;
    @return $sign * ($t - ($t_3 * __eval_poly(($aT11, $aT10, $aT9, $aT8, $aT7, $aT6, $aT5, $aT4, $aT3, $aT2, $aT1), $t_2)));
  } @elseif (($x >= 7/16) and ($x < 11/16)) {
    $t: (2*$x - 1) / (2 + $x);
    @return $sign * ($atan_0_5 + __kernel_atan($t));
  } @elseif (($x >= 11/16) and ($x < 19/16)) {
    $t: ($x - 1)/(1 + $x);
    @return $sign * ($atan_1 + __kernel_atan($t));
  } @elseif (($x >= 19/16) and ($x < 39/16)) {
    $t: ($x - 1.5) / (1 + 1.5*$x);
    @return $sign * ($atan_3_2 + __kernel_atan($t));
  } @else {
    $t: -1/$x;
    @return $sign * ($atan_inf + __kernel_atan($t));
  }
}

@function __kernel_asin($x) {
  /* Method :                  
   *  Since  asin(x) = x + x^3/6 + x^5*3/40 + x^7*15/336 + ...
   *  we approximate asin(x) on [0,0.5] by
   *    asin(x) = x + x*x^2*R(x^2)
   *  where
   *    R(x^2) is a rational approximation of (asin(x)-x)/x^3 
   *  and its remez error is bounded by
   *    |(asin(x)-x)/x^3 - R(x^2)| < 2^(-58.75)
   *
   *  For x in [0.5,1]
   *    asin(x) = pi/2-2*asin(sqrt((1-x)/2))
   *  Let y = (1-x), z = y/2, s := sqrt(z), and pio2_hi+pio2_lo=pi/2;
   *  then for x>0.98
   *    asin(x) = pi/2 - 2*(s+s*z*R(z))
   *      = pio2_hi - (2*(s+s*z*R(z)) - pio2_lo)
   *  For x<=0.98, let pio4_hi = pio2_hi/2, then
   *    f = hi part of s;
   *    c = sqrt(z) - f = (z-f*f)/(s+f)   ...f+c=sqrt(z)
   *  and
   *    asin(x) = pi/2 - 2*(s+s*z*R(z))
   *      = pio4_hi+(pio4-2s)-(2s*z*R(z)-pio2_lo)
   *      = pio4_hi+(pio4-2f)-(2s*z*R(z)-(pio2_lo+2c))
   *
   * Special cases:
   *  if |x|>1, return NaN.
   *
   * http://www.netlib.org/fdlibm/e_asin.c
   */

  $one: 1.00000000000000000000e+00;
  $huge: 1.000e+300;
  $pio2_hi: 1.57079632679489655800e+00;
  $pio2_lo: 6.12323399573676603587e-17;
  $pio4_hi: 7.85398163397448278999e-01;

  /* coefficient for R(x^2) */
  $pS0:  1.66666666666666657415e-01;
  $pS1: -3.25565818622400915405e-01;
  $pS2:  2.01212532134862925881e-01;
  $pS3: -4.00555345006794114027e-02;
  $pS4:  7.91534994289814532176e-04;
  $pS5:  3.47933107596021167570e-05;

  $qS1: -2.40339491173441421878e+00;
  $qS2:  2.02094576023350569471e+00;
  $qS3: -6.88283971605453293030e-01;
  $qS4:  7.70381505559019352791e-02;

  @if abs($x) > 1 {
    @warn "asin domain error: x must be between -1 and 1";
    @return $__SASS_NAN; // NaN
  }

  $sign: __kernel_sign($x);

  @if abs($x) < 0.5 {
    $t: $x*$x;
    //$p: $t*($pS0 + $t * ($pS1 + $t * ($pS2 + $t * ($pS3 + $t * ($pS4 + $t * $pS5)))));
    //$q: $one + $t*($qS1 + $t*($qS2 + $t*($qS3 + $t*$qS4)));

    $p: __eval_poly(($pS5, $pS4, $pS3, $pS2, $pS1, $pS0, 0), $t);
    $q: __eval_poly(($qS4, $qS3, $qS2, $qS1, 1), $t);
    $w: $p/$q;
    @return $x+$x*$w;
  }

  /* 1 > |x| >= 0.5 */
  $w: $one - abs($x);
  $t: $w*0.5;
  //$p: $t*($pS0 + $t*($pS1 + $t*($pS2 + $t*($pS3+ $t*($pS4 + $t*$pS5)))));
  //$q: $one + $t*($qS1 + $t*($qS2 + $t*($qS3 + $t*$qS4)));
  $p: __eval_poly(($pS5, $pS4, $pS3, $pS2, $pS1, $pS0, 0), $t);
  $q: __eval_poly(($qS4, $qS3, $qS2, $qS1, 1), $t);

  $s: __kernel_sqrt($t);

  @if abs($x) > 0.975 {
    $w: $p/$q;
    $t: $pio2_hi - (2.0*($s + $s*$w) - $pio2_lo);
  } @else {
    $w: $s;
    $c: ($t - $w*$w)/($s + $w);
    $r: $p/$q;
    $p: 2.0*$s*$r - ($pio2_lo - 2.0*$c);
    $q: $pio4_hi - 2.0*$w;
    $t: $pio4_hi - ($p - $q);
  }

  @return $sign * $t;

}

@function __kernel_acos($x) {
  /* Method :                  
   *  acos(x)  = pi/2 - asin(x)
   *  acos(-x) = pi/2 + asin(x)
   *
   * Special cases:
   *  if |x|>1, return NaN
   */

  $pio2: 1.57079632679489655800e+00;

  @if abs($x) > 1 {
    @warn "acos domain error: x must be between -1 and 1";
    @return $__SASS_NAN;
  }

  @if $x > 0 {
    @return $pio2 - __kernel_asin($x);
  } @else {
    @return $pio2 + __kernel_asin(abs($x));
  }
}

@function __deg_to_rad($d) {
  $pi: 3.141592653589793238463e00;
  @return $pi*$d/180;
}

@function __rad_to_deg($r) {
  $pi: 3.141592653589793238463e00;
  @return 180 * ($r/$pi);
}

@function __unitless($x) {
  @return $x / ($x * 0 + 1);
}

@function __radians($x) {
  @if type-of($x) != number {
    @warn "Only numbers may be converted to radians";
    @return $x;
  }
  $units: unit($x);
  @if $units == "" {
    @return $x;
  } @elseif $units == deg {
    @return __unitless(__deg_to_rad($x));
  } @else {
    @warn "Unknown angle units.";
    @return $x;
  }
}

@function __degrees($x) {
  @if type-of($x) != number {
    @warn "Ony numbers may be converted to degrees";
    @return $x;
  }
  $units: unit($x);
  @if $units == deg {
    @return $x;
  } @elseif $units == "" {
    // radians
    @return __rad_to_deg($x) + unquote("deg");
  } @else {
    @warn "Unknown angle units.";
    @return $x;
  }
}

@function __reduce_argument($x) {
  $pio2: 1.57079632679489655800e+00;

  $k: floor($x/$pio2);
  $reduced: $x - $k*$pio2;
  $n: __kernel_mod($k, 4);

  @return (reduced: $reduced, n: $n);
}

@function __transform_id($x) {
  @return $x;
}
@function __transform_neg($x) {
  @return -$x;
}
@function __transform_neginv($x) {
  @return -1/$x;
}

@function __dispatch_function($func, $x) {
  /*
   * Method.
   *      Let S,C and T denote the sin, cos and tan respectively on 
   *  [-PI/4, +PI/4]. Reduce the argument x to y1+y2 = x-k*pi/2 
   *  in [-pi/4 , +pi/4], and let n = k mod 4.
   *  We have
   *
   *          n        sin(x)      cos(x)        tan(x)
   *     ----------------------------------------------------------
   *      0             S            C             T
   *      1             C           -S           -1/T
   *      2            -S           -C             T
   *      3            -C            S           -1/T
   *     ----------------------------------------------------------
   *
   */
    $dispatch: (
        'sin': (
          (func: '__kernel_sin', xform: '__transform_id'), 
          (func: '__kernel_cos', xform: '__transform_id'), 
          (func: '__kernel_sin', xform: '__transform_neg'), 
          (func: '__kernel_cos', xform: '__transform_neg')
        ),
        'cos': (
          (func: '__kernel_cos', xform: '__transform_id'), 
          (func: '__kernel_sin', xform: '__transform_neg'),
          (func: '__kernel_cos', xform: '__transform_neg'),
          (func: '__kernel_sin', xform: '__transform_id')
        ),
        'tan': (
          (func: '__kernel_tan', xform: '__transform_id'),
          (func: '__kernel_tan', xform: '__transform_neginv'),
          (func: '__kernel_tan', xform: '__transform_id'),
          (func: '__kernel_tan', xform: '__transform_neginv')
        )
    );

  $reduced: __reduce_argument(__radians($x));
  $n: map-get($reduced, 'n');
  $arg: map-get($reduced, 'reduced');

  $call: nth(map-get($dispatch, $func), $n + 1);

  @return (call: $call, arg: $arg);

}
@function __dispatch_inverse($func, $x) {
  $dispatch: (
    'asin': (func: '__kernel_asin', xform: '__transform_id'),
    'acos': (func: '__kernel_acos', xform: '__transform_id'),
    'atan': (func: '__kernel_asin', xform: '__transform_id')
  );

  $call: map-get($dispatch, $func);

  @return (call: $call, arg: $x);
}

@function __execute_call($c) {
  $call: map-get($c, 'call');
  $arg: map-get($c, 'arg');
  $func: map-get($call, 'func');
  $xform: map-get($call, 'xform');

  @return call(get-function($xform), call(get-function($func), $arg));
}

@function __trig($func, $x) {
  @if type-of($x) != number {
    @warn "#{$func} domain error: non-numeric argument value '#{$x}'";
    @return $x;
  }

  $func-type: (
    'sin': 'function',
    'cos': 'function',
    'tan': 'function',
    'asin': 'inverse',
    'acos': 'inverse',
    'atan': 'inverse'
  );

  $call: null;
  @if map-get($func-type, $func) == 'function' {
    $call: __dispatch_function($func, $x);
  } @elseif map-get($func-type, $func) == 'inverse' {
    $call: __dispatch_inverse($func, $x);
  } @else {
    @warn "Could not dispatch trig func.";
    @return $__SASS_NAN;
  }

  @return __execute_call($call);
}

@function sin($x)  { @return __trig('sin',  $x); }
@function asin($x) { @return __trig('asin', $x); }
@function csc($x)  { @return 1/__trig('sin', $x); }
@function acsc($x) { @return __trig('asin', 1/$x); }
@function cos($x)  { @return __trig('cos',  $x); }
@function acos($x) { @return __trig('acos', $x); }
@function sec($x)  { @return 1/__trig('cos', $x); }
@function asec($x) { @return __trig('acos', 1/$x); }
@function tan($x)  { @return __trig('tan',  $x); }
@function atan($x) { @return __trig('atan', $x); }
@function atan2($y,$x) { @return __trig('atan', $y/$x); }
@function cot($x)  { @return 1/__trig('tan', $x); }
@function acot($x) { @return __trig('atan', 1/$x); }

@function degrees($x) { @return __degrees($x); }
@function radians($x) { @return __radians($x); }

// TODO: what about css's weird rotation semantics that don't match up with standard coordinates